---
title: "Seminário LoggingLab"
subtitle: "Um pacote R para simular o corte seletivo de impacto reduzido em florestas tropicais"
author: "Sylvain Schmitt & Géraldine Derroire"
institute: CIRAD
date: today
date-format: medium
format: 
  revealjs:
    theme: dark
    output-location: fragment
    slide-number: true
    logo: figs/logo.png
    transition: fade
    preview-links: true
    chalkboard: true
bibliography: references.bib
---

# Introdução

O pacote LoggingLab do R, desenvolvido no contexto da extração seletiva de madeira na Guiana Francesa, permite que cada estágio da extração seletiva de madeira seja simulado de forma espacialmente explícita. Isso permite que os efeitos de diferentes práticas de exploração madeireira no ecossistema sejam avaliados e comparados com precisão. O objetivo desse workshop prático será apresentar e usar em conjunto as funções gerais desse pacote.

```{r}
set.seed(42)
```

::: notes
Notas.
:::

## O que o pacote faz?

Simulação de corte seletivo usando dados de inventário florestal.

![](https://ars.els-cdn.com/content/image/1-s2.0-S0304380023002697-ga1_lrg.jpg)

::: notes
Notas.
:::

## O que o pacote faz?

::::: columns
::: {.column width="30%"}
![](figs/Fig_Flowchart.jpg)
:::

::: {.column width="70%"}
Os estágios são:

-   preparação de dados
-   trilhas principais
-   zonas exploráveis
-   seleção de árvores
-   trilhas de arraste
-   corte de árvores
-   quantificação de volumes
:::
:::::

::: notes
Notas.
:::

## Instalação do pacote

Usaremos o pacote LoggingLab para R [@Badouard2024] para simular a extração de madeira de impacto reduzido em uma floresta tropical. O pacote deve ser instalado a partir de seu repositório no Github, pois ainda não está no CRAN.

```{r install}
#| eval: false
#| echo: true
install.packages("devtools")
devtools::install_github("VincyaneBadouard/LoggingLab")
```

::: notes
Notas.
:::

## Outros pacotes R

Usaremos o `tidyverse` para manipular tabelas e criar gráficos, o `sf` para manipular objetos espaciais e o `terra` e o `tidyterra` para manipular dados raster.

```{r libs}
#| echo: true
library(LoggingLab)
library(tidyverse)
library(sf)
library(terra)
library(tidyterra)
theme_set(theme_bw())
```

::: notes
Notas.
:::

# Entradas

Os dados e parâmetros necessários para usar `LoggingLab` são as seguintes:

-   **Inventário**: inventários de árvores da parcela
-   **Máscara do lote**: os limites da área a ser explorada
-   **Dados da espécie**: dados específicos para cada espécie
-   **Alometria volumétrica**: os parâmetros de alometria a serem calculados

::: notes
Notas.
:::

## Inventário

O inventário deve conter o diâmetro, a a identificação botânica e as coordenadas de todos os arvores com menos de um determinado diâmetro (normalmente DAP \>= 10cm).

No momento, o simulador está trabalhando em pequenos lotes (alguns hectares) e não representa toda a operação de uma concessão, pois seu foco é a quantificação detalhada dos danos pós-operacionais de acordo com as práticas.

::: notes
DAP: diametro a altura do peito
:::

## Inventário

As colunas exigidas pelo `LoggingLab` são:

::: incremental
-   `Forest`: o nome da floresta
-   `idTree`: um identificador exclusivo para cada árvore
-   `Xutm` e `Yutm`: as coordenadas de cada árvore
-   `CodeAlive`: árvore viva ou morta.
-   `Family`, `Genus`, `Species`: dados botânicos
-   `CircCorr`: circunferência de cada árvore
:::

::: notes
Notas.
:::

## Inventário

O inventário do lote 6 de Paracou está disponível dentro `LoggingLab`.

```{r p6}
#| echo: true
head(Paracou6_2016)
```

::: notes
Notas.
:::

## Inventário {.smaller}

Podemos fazer um mapa do lote 6 de Paraou em 2016.

```{r p6plot}
#| echo: true
Paracou6_2016 %>%   st_as_sf(coords = c("Xutm", "Yutm")) %>% 
  ggplot(aes(color = paste(Genus, Species), size = CircCorr)) + geom_sf() + 
  scale_size_continuous(range = c(.25, 3)) + theme(legend.position = "none")
```

::: notes
Notas.
:::

## Máscara do lote

A máscara do lote define os limites da área a ser considerada ou seja, os limites do lote. A máscara do lote é usada pelo `LoggingLab` para validar o inventário e definir a zonas exploráveis.

::: notes
Notas.
:::

## Máscara do lote {.smaller}

A máscara do lote 6 de Paracou está disponível dentro `LoggingLab`.

```{r mask}
#| echo: true
ggplot(st_as_sf(PlotMask)) + geom_sf()
```

::: notes
Notas.
:::

## Dados de espécies

`SpeciesCriteria` contém dados específicos de cada espécie. As colunas são:

::: incremental
-   `CommercialLevel`: Nível de interesse econômico
-   `MinFD`: Diâmetro mínimo de corte, em centímetros
-   `UpMinFD`: Diâmetro mínimo de corte aprimorado (caso de povoamento excessivamente rico), em centímetros
-   `MaxFD`: Diâmetro máximo de corte, em centímetros
:::

::: notes
Explique aqui quais são os diferentes níveis do CommercialLevel, pois pode não haver níveis diferentes no Brasil.
:::

## Dados de espécies

Dados de espécies de Guiana Francesa são disponível dentro `LoggingLab`.

```{r species}
#| echo: true
head(SpeciesCriteria)
```

::: notes
Notas.
:::

## Alometrias volumétricas

O `LoggingLab` usa alometrias volumétricas com parâmetros que variam de acordo com a região explorada. Por exemplo, por volume de árvores que o `LoggingLab` usa:

$$Volume = aCoef + bCoef \times DBH^2$$

Com $Volume$ o volume das árvores e $DBH$ o diametro das árvores.

::: notes
Notas.
:::

## Alometrias volumétrica

Alometrias volumétricas para diferentes regiões da Guiana Francesa são disponível dentro `LoggingLab`.

```{r allometry}
#| echo: true
head(ForestZoneVolumeParametersTable)
```

Outras alometrias podem ser modificadas, como as alometrias de coroa.

::: notes
Notas.
:::

# Simulação de exploração

Agora, vamos executar uma simulação de exploração passo a passo usando `LoggingLab`.

::: notes
Notas.
:::

## Validar o inventário

As árvores que não estão na área registrada ou que são muito pequenas para serem consideradas são excluídas.

```{r prep}
#| echo: true
inventory <- inventorycheckformat(Paracou6_2016)
inventory <- cleaninventory(inventory, PlotMask)
```

`inventorycheckformat` verifica se os dados de inventário recebidos são compatíveis com o `LoggingLab`, enquanto `cleaninventory` limpa os dados de inventário.

::: notes
Notas.
:::

## Validar o inventário {.smaller}

Como os dados já estavam limpos, não houve muitas alterações.

```{r prepmap}
#| echo: true
inventory %>% 
  st_as_sf(coords = c("Xutm", "Yutm")) %>% 
  ggplot(aes(color = paste(Genus, Species), size = CircCorr)) + geom_sf() + 
  scale_size_continuous(range = c(.25, 3)) + theme(legend.position = "none")
```

::: notes
Notas.
:::

## Calcular as dimensões da árvore

Em seguida, o `addtreedim` calcula as dimensões da árvore (altura da árvore, tronco e copa, diâmetro da copa, volume explorável, densidade da madeira e biomassa).

```{r dims}
#| echo: true
inventory <- addtreedim(inventory, ForestZoneVolumeParametersTable)
head(select(inventory, TreeHarvestableVolume, TrunkHeight, TreeHeight, CrownHeight,
            CrownDiameter, WoodDensity, AGB))
```

::: notes
Notas.
:::

## Calcular as dimensões da árvore {.smaller}

Por exemplo, podemos elaborar um mapa do volume explorável.

```{r dimsplot}
#| echo: true
inventory %>% st_as_sf(coords = c("Xutm", "Yutm")) %>% 
  ggplot() + geom_sf(aes(col = AGB, size = CircCorr)) + 
  scale_color_viridis_c("Biomassa\n(tonelada)", trans = "log", labels = ~round(., 1)) +
  scale_size_continuous("Circunferência", range = c(.25, 3))
```

::: notes
Notas.
:::

## Trilhas principais

Como estamos simulando apenas a exploração em alguns hectares, não estamos simulando as trilhas principais. Mas precisamos de sua localização para simular as trilhas de arraste.

O `maintrailextract` gera as trilhas principais da área que está sendo explorado usando os bordas de máscara do lote.

::: notes
Notas.
:::

## Trilhas principais

```{r maintrail}
#| echo: true
#| cache: true
MainTrails <- maintrailextract(DTMParacou)
ggplot(MainTrails) +
  geom_sf(linewidth = 4)
```

::: notes
Notas.
:::

## Zonas exploráveis

Em seguida, precisamos definir as áreas de colheita e as áreas acessíveis às máquinas dentro do talhão. Por padrão, uma unidade de prospecção é:

::: incremental
-   com uma inclinação inferior a 27%
-   evitando planícies e o sistema de água (buffer de 30 m).
:::

::: notes
Notas.
:::

## Zonas exploráveis {.smaller}

Usamos `harvestableareadefinition` com uma opção “winching” definida como 2, ou seja, a garra é usada, se possível (extensão de 6 m), e o cabo é usado até 40 m.

```{r harvareas}
#| echo: true
#| cache: true
HarvestableArea <- harvestableareadefinition(
  topography = DTMParacou,
  creekverticaldistance = CreekDistances$distvert,
  creekhorizontaldistance = CreekDistances$disthorz,
  maintrails = MainTrails,
  plotmask = PlotMask,
  scenario = "manual",
  winching = "2",
  advancedloggingparameters = loggingparameters()
)
```

::: notes
Notas.
:::

## Zonas exploráveis {.smaller .scrollable}

As áreas verdes escuras podem ser colhidas por máquina e as áreas verdes claras por cabo. As outras áreas não podem ser colhidas.

```{r harvareasplot}
#| echo: true
(base <- ggplot() + geom_spatraster(data = rast(DTMParacou), alpha = .5) +
    scale_fill_gradient(low = "darkblue", high = "white", "Altura (m)", na.value = NA) + 
    geom_sf(data = HarvestableArea$HarvestablePolygons, fill = "darkgreen", alpha = 0.3) +
    geom_sf(data = HarvestableArea$MachinePolygons, fill = "darkgreen", alpha = 0.7))
```

::: notes
Notas.
:::

## Seleção de árvores {.smaller}

Em seguida, selecionamos as árvores a serem colhidas e as árvores futuras e de reserva. As árvores podem ser colhidas se:

::: incremental
-   Pertencem a espécies de primeira categoria econômica ou mais, se houver diversificação.

-   O DBH estiver entre o MinFD e o MaxFD.

-   Estão localizadas em declives \< 22%.

-   Estão fora das trilhas principais.
:::

As árvores a serem colhidas são escolhidas em ordem decrescente de volume, até que o volume objetivo seja atingido.

As árvores futuras são aqueles a serem explorados na próxima campanha. As árvores de reserva são conservadas como árvores-semente para regeneração natural.

::: notes
Notas.
:::

## Seleção de árvores {.smaller}

O função `treeselection` seleciona árvores com os critérios anteriores.

```{r treesel}
#| echo: true
#| warning: true
inventory <- inventory %>% 
  commercialcriteriajoin(SpeciesCriteria)
TreeSelection <- inventory %>% 
  treeselection(
    topography = DTMParacou,
    speciescriteria = SpeciesCriteria,
    scenario ="manual", 
    objective = 30,
    fuel = "0",
    winching = "2",
    diversification = TRUE, 
    specieslax = FALSE,
    objectivelax = TRUE,
    harvestablearea = HarvestableArea$HarvestableArea,
    plotslope = HarvestableArea$PlotSlope,
    maintrails = MainTrails,
    harvestablepolygons = HarvestableArea$HarvestablePolygons,
    advancedloggingparameters = loggingparameters()
  )
crs <- st_crs(HarvestableArea$HarvestablePolygons)
```

::: notes
Notas.
:::

## Seleção de árvores {.smaller}

Podemos mapear árvores exploráveis, selecionadas, futuras e de reserva.

```{r harvest}
#| echo: true
base + geom_sf(data = TreeSelection$HarvestableTreesPoints, aes(colour = "Harvestable")) +
  geom_sf(data = TreeSelection$SelectedTreesPoints, aes(colour = "Selected")) +
  geom_sf(data = TreeSelection$FutureTreesPoints, aes(colour = "Future")) +
  geom_sf(data = TreeSelection$ReserveTreesPoints, aes(colour = "Reserve"))
```

::: notes
Notas.
:::

## Trilhas de arraste

As trilhas de arraste permitem que as árvores selecionadas sejam colhidas pelas máquinas escolhidas. A rota é otimizada para reduzir a distância percorrida, respeitando as restrições topográficas e evitando as árvores a serem protegidas. Elas têm 4 metros de largura, com uma inclinação máxima de 22% e uma inclinação lateral máxima de 4%. Elas evitam árvores a serem cortadas, árvores grandes (\>50 cm) e árvores de reserva.

::: notes
Notas
:::

## Trilhas de arraste

`secondstrailsopening` permite definir trihlas de arraste.

```{r 2trail}
#| echo: true
#| cache: true
ScndTrailOutputs <- secondtrailsopening(
  topography = DTMParacou,
  plotmask = PlotMask,
  maintrails = MainTrails,
  plotslope = HarvestableArea$PlotSlope,
  harvestablepolygons = HarvestableArea$HarvestablePolygons,
  machinepolygons = HarvestableArea$MachinePolygons,
  treeselectionoutputs = TreeSelection,
  scenario = "manual",
  winching = "2",
  fuel = "0",
  advancedloggingparameters = loggingparameters()
)
inventory <- ScndTrailOutputs$inventory
```

⚠️ Essa etapa pode levar algum tempo.

::: notes
Notas.
:::

## Trilhas de arraste {.smaller}

Podemos mapear as trilhas de arraste com o árvores selecionadas.

```{r tracksplot}
#| echo: true
base + geom_sf(data = st_as_sf(SecondaryTrails$SmoothedTrails)) +
  geom_sf(data = TreeSelection$SelectedTreesPoints, aes(colour = "Selected"))
```

::: notes
Notas
:::

## Corte de árvores

Em seguida, simulamos o corte da árvore. O corte da árvore cria uma árvore no solo, cujas dimensões são calculadas usando alometrias específicas.

O corte direcional visa direcionar a queda da árvore, com o pé um ângulo em relação ao caminho, e evitando as árvores a serem protegidas. Mas o corte direcional pode falhar (em 40% dos casos)!

## Corte de árvores

`treefelling` permite que você simula a corte de árvores.

```{r treefelling}
#| echo: true
#| cache: true
inventory <- inventory %>% 
  treefelling(
    scenario = "manual", 
    fuel = "0",
    winching = "2", 
    directionalfelling = "2",
    maintrailsaccess = ScndTrailOutputs$MainTrailsAccess,
    scndtrail = ScndTrailOutputs$SmoothedTrails,
    advancedloggingparameters = loggingparameters()
  )
```

::: notes
Notas.
:::

## Corte de árvores {.smaller}

Podemos mapear os árvores no solo.

```{r mappost}
#| echo: true
FelledTrees <- getgeometry(inventory, TreePolygon) %>% st_set_crs(crs)
base + geom_sf(data = st_as_sf(SecondaryTrails$SmoothedTrails)) + geom_sf(data = FelledTrees, fill = "lightpink")
```

::: notes
Notas.
:::

## Quantificar de volumes

Por fim, podemos quantificar o volume de madeira colhida de árvores saudáveis usadas para a produção de madeira com `timberharvestedvolume`.

```{r timberv}
#| echo: true
TimberV <- timberharvestedvolume(
  inventory, 
  scenario = "manual", 
  fuel = "0",
  advancedloggingparameters = loggingparameters()
)
TimberV$TimberLoggedVolume
```

::: notes
Notas.
:::

## Quantificar de volumes

Os detalhes da produção por espécie estão no inventário.

```{r timbervsp}
#| echo: true
TimberV$inventory %>% 
  filter(DeathCause == "cut") %>% 
  group_by(CommercialName) %>% 
  summarise(
    trees_n = n(), 
    volume = sum(TimberLoggedVolume), 
    CommercialLevel = unique(CommercialLevel)
  )
```

::: notes
Notas.
:::

## Quantificar de volumes {.smaller}

Mas, acima de tudo, podemos quantificar o volume de danos por causa de morte.

```{r degagb}
#| echo: true
TimberV$inventory %>% 
  group_by(DeathCause) %>% 
  summarise(AGB = sum(AGB)) %>% na.omit() %>% 
  ggplot(aes(DeathCause, AGB)) + geom_col() + xlab("")
```

<!-- Actually, if you do it like that you just get the cause of death but not really the volume of damage.
We indeed considered that the unused part of harvested trees are also damage.
So either we keep the graph like that and change the text, or we change the graph to get the actual quantity of damage.
I'm in favour of the second option.

I made a function for that for ManagForRes, I will adapt it for the presentation to practitionners, we can use it here if we decide to go for that.
Note for me; it's in Misc/2211_check_deathtree_fate.Rmd
-->

::: notes
Notas.
:::

# Para saber mais

Algumas informações adicionais para aqueles que desejam ir além com o `LoggingLab`.

::: notes
Notas.
:::

## Uma única simulação {.smaller}

Todas as etapas de simulação podem ser incluídas em uma única função para economizar tempo.

```{r single}
#| echo: true
#| cache: true
Rslt <- loggingsimulation1(
  Paracou6_2016,
  plotmask = PlotMask, 
  topography = DTMParacou,
  creekverticaldistance = CreekDistances$distvert,
  creekhorizontaldistance = CreekDistances$disthorz,
  speciescriteria = SpeciesCriteria,
  volumeparameters = ForestZoneVolumeParametersTable,
  scenario = "manual",
  objective = 30,
  fuel = "0", 
  winching = "2", 
  directionalfelling = "2", 
  diversification = TRUE, 
  specieslax = FALSE, 
  objectivelax = TRUE,
  crowndiameterparameters = ParamCrownDiameterAllometry,
  advancedloggingparameters = loggingparameters()
)
```

Várias simulações podem ser executadas pela função `loggingsimulation()` para levar em conta a estocasticidade com o argumento `iter` (número de simulações) e `cores` (número de núcleos de computador usados para paralelizar o cálculo).

::: notes
Notas.
:::

## Resultados

`loggingsummary1` retorna um resumo das saídas da função de simulação.

```{r res}
#| echo: true
try(loggingsummary1(Rslt))
```

::: notes
Notas.
:::

## Cenários

Os cenários reúnem os principais parâmetros de exploração. Eles são usados para definir a zona explorável, as árvores a serem cortadas e a modelagem de trilhas secundárias.

::: notes
Notas.
:::

## Cenários {.smaller}

As colunas do cenário são:

::: incremental
-   `Type`: o nome do cenário
-   `SpatialDataType`: o tipo de dados espaciais (Lidar ou SRTM)
-   `Objective`: o volume objetivo por hectare
-   `Diversification`: por permitir o corte de outras espécies além das principais espécies comerciais
-   `Winching`: o método de guincho, sem cabo ou garra = “0”, somente cabo = “1”, garra + cabo = “2”
-   `DirectionalFelling`: “0” = não utilizado, ‘1’ = apenas para evitar danos a árvores futuras e de reserva, ‘2’ = evitar danos a árvores futuras e de reserva + orientação da trilha
:::

Todas as funções permitem `scenario = “manual”`: nesse caso, todos os argumentos devem ser adicionados manualmente. Seu nome é o mesmo das colunas.

::: notes
Notas.
:::

## Cenários

`LogingLab` inclui cenários predefinidos que correspondem a diferentes versões de registro de impacto reduzido na Guiana Francesa.

```{r scenarios}
#| echo: true
ScenariosTable
```

## Parâmetros de exploração {.smaller .scrollable}

`loggingparameters()` define todos os parâmetros de exploração. Consulte sua ajuda (`?loggingparameters`). Os valores padrão são os usados na Guiana Francesa.

```{r logpars}
#| echo: true
loggingparameters()
```

# Conclusão

Parabéns 👏 , agora vocês são profissionais do `LoggingLab`\`!

Falando mais seriamente, ficaremos felizes em responder a quaisquer perguntas que você possa ter, portanto, não hesite em dar uma olhada no [GitHub](https://github.com/VincyaneBadouard/LoggingLab/issues) para quaisquer dúvidas futuras.

::: footer
*Sylvain Schmitt (sylvain.schmitt\@cirad.fr) & Géraldine Derroire (geraldine.derroire\@cirad.fr)*
:::

::: notes
Notas.
:::

## Referências
